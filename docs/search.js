window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data", "modulename": "src.data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data.dataset", "modulename": "src.data.dataset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data.dataset.ECBData", "modulename": "src.data.dataset", "qualname": "ECBData", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.data.dataset.ECBData.__init__", "modulename": "src.data.dataset", "qualname": "ECBData.__init__", "kind": "function", "doc": "<p>Initialize ECB data object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.data.dataset.ECBData.df", "modulename": "src.data.dataset", "qualname": "ECBData.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data.dataset.ECBData.set_period", "modulename": "src.data.dataset", "qualname": "ECBData.set_period", "kind": "function", "doc": "<p>Set start and end date for data load\nDo this before calling read_data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>, </span><span class=\"param\"><span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.dataset.ECBData.get_period", "modulename": "src.data.dataset", "qualname": "ECBData.get_period", "kind": "function", "doc": "<p>Get start and end date from the actual data loaded</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data.dataset.ECBData.read_data", "modulename": "src.data.dataset", "qualname": "ECBData.read_data", "kind": "function", "doc": "<p>Read data from ECB</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.dataset.ECBData.load_data", "modulename": "src.data.dataset", "qualname": "ECBData.load_data", "kind": "function", "doc": "<p>Load data from file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.dataset.ECBData.save_data", "modulename": "src.data.dataset", "qualname": "ECBData.save_data", "kind": "function", "doc": "<p>Save data to file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.definitions", "modulename": "src.data.definitions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data.definitions.ROOT_DIR", "modulename": "src.data.definitions", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm&#x27;)"}, {"fullname": "src.data.definitions.FIGURES_PATH", "modulename": "src.data.definitions", "qualname": "FIGURES_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm/reports/figures&#x27;)"}, {"fullname": "src.data.definitions.VIDEO_PATH", "modulename": "src.data.definitions", "qualname": "VIDEO_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm/reports/videos&#x27;)"}, {"fullname": "src.data.definitions.MODEL_PATH", "modulename": "src.data.definitions", "qualname": "MODEL_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm/models&#x27;)"}, {"fullname": "src.data.definitions.DATA_RAW", "modulename": "src.data.definitions", "qualname": "DATA_RAW", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm/data/raw&#x27;)"}, {"fullname": "src.data.definitions.DATA_DEBUG", "modulename": "src.data.definitions", "qualname": "DATA_DEBUG", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm/data/debug&#x27;)"}, {"fullname": "src.data.definitions.DATA_MODEL_PATH", "modulename": "src.data.definitions", "qualname": "DATA_MODEL_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm/data/model&#x27;)"}, {"fullname": "src.data.definitions.TENSORBOARD_LOGS", "modulename": "src.data.definitions", "qualname": "TENSORBOARD_LOGS", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm/tensorboard_logs&#x27;)"}, {"fullname": "src.data.definitions.DEBUG_MODE", "modulename": "src.data.definitions", "qualname": "DEBUG_MODE", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "src.data.definitions.FFMPEG_PATH", "modulename": "src.data.definitions", "qualname": "FFMPEG_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;C:\\\\Program Files\\\\ffmpeg-6.0-essentials_build\\\\bin&#x27;"}, {"fullname": "src.data.definitions.READ_DATA_FROM_ECB", "modulename": "src.data.definitions", "qualname": "READ_DATA_FROM_ECB", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "src.data.inflation", "modulename": "src.data.inflation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data.inflation.DATAFLOW", "modulename": "src.data.inflation", "qualname": "DATAFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ICP&#x27;"}, {"fullname": "src.data.inflation.FREQ", "modulename": "src.data.inflation", "qualname": "FREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;M&#x27;"}, {"fullname": "src.data.inflation.REF_AREA", "modulename": "src.data.inflation", "qualname": "REF_AREA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;NL&#x27;"}, {"fullname": "src.data.inflation.ADJUSTMENT", "modulename": "src.data.inflation", "qualname": "ADJUSTMENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;N&#x27;"}, {"fullname": "src.data.inflation.CLASS", "modulename": "src.data.inflation", "qualname": "CLASS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;000000&#x27;"}, {"fullname": "src.data.inflation.PROVIDER", "modulename": "src.data.inflation", "qualname": "PROVIDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;4&#x27;"}, {"fullname": "src.data.inflation.VALIDATION", "modulename": "src.data.inflation", "qualname": "VALIDATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ANR&#x27;"}, {"fullname": "src.data.inflation.Inflation", "modulename": "src.data.inflation", "qualname": "Inflation", "kind": "class", "doc": "<p>Read inflation data from ECB Statistical Data Warehouse</p>\n", "bases": "src.data.dataset.ECBData"}, {"fullname": "src.data.inflation.Inflation.__init__", "modulename": "src.data.inflation", "qualname": "Inflation.__init__", "kind": "function", "doc": "<p>Initialize ECB data object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.data.inflation.Inflation.name", "modulename": "src.data.inflation", "qualname": "Inflation.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data.inflation.Inflation.read_data", "modulename": "src.data.inflation", "qualname": "Inflation.read_data", "kind": "function", "doc": "<p>Read data from ECB</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.inflation.Inflation.lineplot", "modulename": "src.data.inflation", "qualname": "Inflation.lineplot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.interest", "modulename": "src.data.interest", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data.interest.DATAFLOW", "modulename": "src.data.interest", "qualname": "DATAFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;MIR&#x27;"}, {"fullname": "src.data.interest.FREQ", "modulename": "src.data.interest", "qualname": "FREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;M&#x27;"}, {"fullname": "src.data.interest.REF_AREA", "modulename": "src.data.interest", "qualname": "REF_AREA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;NL&#x27;"}, {"fullname": "src.data.interest.SECTOR", "modulename": "src.data.interest", "qualname": "SECTOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;B&#x27;"}, {"fullname": "src.data.interest.BALANCE_ITEM", "modulename": "src.data.interest", "qualname": "BALANCE_ITEM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;A2CC&#x27;"}, {"fullname": "src.data.interest.MATURITY", "modulename": "src.data.interest", "qualname": "MATURITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;F+I+O+P&#x27;"}, {"fullname": "src.data.interest.DATA_TYPE", "modulename": "src.data.interest", "qualname": "DATA_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;R&#x27;"}, {"fullname": "src.data.interest.AMOUNT_CAT", "modulename": "src.data.interest", "qualname": "AMOUNT_CAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;A&#x27;"}, {"fullname": "src.data.interest.COUNTERPARTY_SECTOR", "modulename": "src.data.interest", "qualname": "COUNTERPARTY_SECTOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;2250&#x27;"}, {"fullname": "src.data.interest.CURRENCY", "modulename": "src.data.interest", "qualname": "CURRENCY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;EUR&#x27;"}, {"fullname": "src.data.interest.COVERAGE", "modulename": "src.data.interest", "qualname": "COVERAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;N&#x27;"}, {"fullname": "src.data.interest.Interest", "modulename": "src.data.interest", "qualname": "Interest", "kind": "class", "doc": "<p>Read interest data from ECB Statistical Data Warehouse</p>\n", "bases": "src.data.dataset.ECBData"}, {"fullname": "src.data.interest.Interest.__init__", "modulename": "src.data.interest", "qualname": "Interest.__init__", "kind": "function", "doc": "<p>Initialize ECB data object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.data.interest.Interest.name", "modulename": "src.data.interest", "qualname": "Interest.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data.interest.Interest.read_data", "modulename": "src.data.interest", "qualname": "Interest.read_data", "kind": "function", "doc": "<p>Read data from ECB</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.interest.Interest.lineplot", "modulename": "src.data.interest", "qualname": "Interest.lineplot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.interest.Interest.load_data", "modulename": "src.data.interest", "qualname": "Interest.load_data", "kind": "function", "doc": "<p>Load data from file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.zerocurve", "modulename": "src.data.zerocurve", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data.zerocurve.DATAFLOW", "modulename": "src.data.zerocurve", "qualname": "DATAFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;YC&#x27;"}, {"fullname": "src.data.zerocurve.FREQ", "modulename": "src.data.zerocurve", "qualname": "FREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;B&#x27;"}, {"fullname": "src.data.zerocurve.REF_AREA", "modulename": "src.data.zerocurve", "qualname": "REF_AREA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;U2&#x27;"}, {"fullname": "src.data.zerocurve.CURRENCY", "modulename": "src.data.zerocurve", "qualname": "CURRENCY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;EUR&#x27;"}, {"fullname": "src.data.zerocurve.PROVIDER_FM", "modulename": "src.data.zerocurve", "qualname": "PROVIDER_FM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;4F&#x27;"}, {"fullname": "src.data.zerocurve.INSTRUMENT_FM", "modulename": "src.data.zerocurve", "qualname": "INSTRUMENT_FM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;G_N_A&#x27;"}, {"fullname": "src.data.zerocurve.PROVIDER_FM_ID", "modulename": "src.data.zerocurve", "qualname": "PROVIDER_FM_ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;SV_C_YM&#x27;"}, {"fullname": "src.data.zerocurve.TENORS", "modulename": "src.data.zerocurve", "qualname": "TENORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ON&#x27;: 0, &#x27;IF_3M&#x27;: 3, &#x27;IF_6M&#x27;: 6, &#x27;IF_9M&#x27;: 9, &#x27;IF_1Y&#x27;: 12, &#x27;IF_1Y3M&#x27;: 15, &#x27;IF_1Y6M&#x27;: 18, &#x27;IF_2Y&#x27;: 24, &#x27;IF_3Y&#x27;: 36, &#x27;IF_4Y&#x27;: 48, &#x27;IF_5Y&#x27;: 60, &#x27;IF_7Y&#x27;: 84, &#x27;IF_10Y&#x27;: 120, &#x27;IF_15Y&#x27;: 180, &#x27;IF_30Y&#x27;: 360}"}, {"fullname": "src.data.zerocurve.Zerocurve", "modulename": "src.data.zerocurve", "qualname": "Zerocurve", "kind": "class", "doc": "<p>Read zero curve data from ECB Statistical Data Warehouse</p>\n", "bases": "src.data.dataset.ECBData"}, {"fullname": "src.data.zerocurve.Zerocurve.__init__", "modulename": "src.data.zerocurve", "qualname": "Zerocurve.__init__", "kind": "function", "doc": "<p>Initialize ECB data object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.data.zerocurve.Zerocurve.name", "modulename": "src.data.zerocurve", "qualname": "Zerocurve.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data.zerocurve.Zerocurve.read_data", "modulename": "src.data.zerocurve", "qualname": "Zerocurve.read_data", "kind": "function", "doc": "<p>Read data from ECB</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data.zerocurve.Zerocurve.interpolate", "modulename": "src.data.zerocurve", "qualname": "Zerocurve.interpolate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data.zerocurve.Zerocurve.lineplot", "modulename": "src.data.zerocurve", "qualname": "Zerocurve.lineplot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.zerocurve.Zerocurve.load_data", "modulename": "src.data.zerocurve", "qualname": "Zerocurve.load_data", "kind": "function", "doc": "<p>Load data from file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.zerocurve.Zerocurve.step", "modulename": "src.data.zerocurve", "qualname": "Zerocurve.step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data.zerocurve.Zerocurve.reset", "modulename": "src.data.zerocurve", "qualname": "Zerocurve.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.features", "modulename": "src.features", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.features.build_features", "modulename": "src.features.build_features", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models", "modulename": "src.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.action_space", "modulename": "src.models.action_space", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.action_space.MAX_FUNDING_PER_TENOR", "modulename": "src.models.action_space", "qualname": "MAX_FUNDING_PER_TENOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "src.models.action_space.ActionSpace", "modulename": "src.models.action_space", "qualname": "ActionSpace", "kind": "class", "doc": "<p>A (possibly unbounded) box in \\( \\mathbb{R}^n \\).</p>\n\n<p>Specifically, a Box represents the Cartesian product of n closed intervals.\nEach interval has the form of one of \\( [a, b] \\), \\( (-\\infty, b] \\),\n\\( [a, \\infty) \\), or \\( (-\\infty, \\infty) \\).</p>\n\n<p>There are two common use cases:</p>\n\n<ul>\n<li><p>Identical bound for each dimension::</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"go\">Box(-1.0, 2.0, (3, 4), float32)</span>\n</code></pre>\n</div></li>\n<li><p>Independent bound for each dimension::</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.0</span><span class=\"p\">]),</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">]),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"go\">Box([-1. -2.], [2. 4.], (2,), float32)</span>\n</code></pre>\n</div></li>\n</ul>\n", "bases": "gymnasium.spaces.space.Space[numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]]"}, {"fullname": "src.models.action_space.ActionSpace.__init__", "modulename": "src.models.action_space", "qualname": "ActionSpace.__init__", "kind": "function", "doc": "<p>Constructor of <code>Box</code>.</p>\n\n<p>The argument <code>low</code> specifies the lower bound of each dimension and <code>high</code> specifies the upper bounds.\nI.e., the space that is constructed will be the product of the intervals \\( [\\text{low}[i], \\text{high}[i]] \\).</p>\n\n<p>If <code>low</code> (or <code>high</code>) is a scalar, the lower bound (or upper bound, respectively) will be assumed to be\nthis value across all dimensions.</p>\n\n<p>Args:\n    low (SupportsFloat | np.ndarray): Lower bounds of the intervals. If integer, must be at least <code>-2**63</code>.\n    high (SupportsFloat | np.ndarray]): Upper bounds of the intervals. If integer, must be at most <code>2**63 - 2</code>.\n    shape (Optional[Sequence[int]]): The shape is inferred from the shape of <code>low</code> or <code>high</code> <code>np.ndarray</code>s with\n        <code>low</code> and <code>high</code> scalars defaulting to a shape of (1,)\n    dtype: The dtype of the elements of the space. If this is an integer type, the <code>Box</code> is essentially a discrete space.\n    seed: Optionally, you can use this argument to seed the RNG that is used to sample from the space.</p>\n\n<p>Raises:\n    ValueError: If no shape information is provided (shape is None, low is None and high is None) then a\n        value error is raised.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_tenors</span>, </span><span class=\"param\"><span class=\"n\">min_units</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">max_units</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.models.action_space.ActionSpace.normalize_action", "modulename": "src.models.action_space", "qualname": "ActionSpace.normalize_action", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.action_space.ActionSpace.denormalize_action", "modulename": "src.models.action_space", "qualname": "ActionSpace.denormalize_action", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">normalized_action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.action_space.main", "modulename": "src.models.action_space", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env", "modulename": "src.models.bank_env", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.EPISODE_LENGTH", "modulename": "src.models.bank_env", "qualname": "EPISODE_LENGTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "60"}, {"fullname": "src.models.bank_env.BankEnv", "modulename": "src.models.bank_env", "qualname": "BankEnv", "kind": "class", "doc": "<p>The main Gymnasium class for implementing Reinforcement Learning Agents environments.</p>\n\n<p>The class encapsulates an environment with arbitrary behind-the-scenes dynamics through the <code>step()</code> and <code>reset()</code> functions.\nAn environment can be partially or fully observed by single agents. For multi-agent environments, see PettingZoo.</p>\n\n<p>The main API methods that users of this class need to know are:</p>\n\n<ul>\n<li><code>step()</code> - Updates an environment with actions returning the next agent observation, the reward for taking that actions,\nif the environment has terminated or truncated due to the latest action and information from the environment about the step, i.e. metrics, debug info.</li>\n<li><code>reset()</code> - Resets the environment to an initial state, required before calling step.\nReturns the first agent observation for an episode and information, i.e. metrics, debug info.</li>\n<li><code>render()</code> - Renders the environments to help visualise what the agent see, examples modes are \"human\", \"rgb_array\", \"ansi\" for text.</li>\n<li><code>close()</code> - Closes the environment, important when external software is used, i.e. pygame for rendering, databases</li>\n</ul>\n\n<p>Environments have additional attributes for users to understand the implementation</p>\n\n<ul>\n<li><code>action_space</code> - The Space object corresponding to valid actions, all valid actions should be contained within the space.</li>\n<li><code>observation_space</code> - The Space object corresponding to valid observations, all valid observations should be contained within the space.</li>\n<li><code>reward_range</code> - A tuple corresponding to the minimum and maximum possible rewards for an agent over an episode.\nThe default reward range is set to \\( (-\\infty,+\\infty) \\).</li>\n<li><code>spec</code> - An environment spec that contains the information used to initialize the environment from <code>gymnasium.make()</code></li>\n<li><code>metadata</code> - The metadata of the environment, i.e. render modes, render fps</li>\n<li><code>np_random</code> - The random number generator for the environment. This is automatically assigned during\n<code>super().reset(seed=seed)</code> and when assessing <code>self.np_random</code>.</li>\n</ul>\n\n<p><em>seealso For modifying or extending environments use the <code>gymnasium.Wrapper</code> class.</em></p>\n\n<p>Note:\n    To get reproducible sampling of actions, a seed can be set with <code>env.action_space.seed(123)</code>.</p>\n", "bases": "typing.Generic[~ObsType, ~ActType]"}, {"fullname": "src.models.bank_env.BankEnv.__init__", "modulename": "src.models.bank_env", "qualname": "BankEnv.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">render_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;human&#39;</span></span>)</span>"}, {"fullname": "src.models.bank_env.BankEnv.metadata", "modulename": "src.models.bank_env", "qualname": "BankEnv.metadata", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;render_modes&#x27;: [&#x27;human&#x27;, &#x27;rgb_array&#x27;], &#x27;render_fps&#x27;: 15}"}, {"fullname": "src.models.bank_env.BankEnv.render_mode", "modulename": "src.models.bank_env", "qualname": "BankEnv.render_mode", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "src.models.bank_env.BankEnv.bankmodel", "modulename": "src.models.bank_env", "qualname": "BankEnv.bankmodel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.observation_space", "modulename": "src.models.bank_env", "qualname": "BankEnv.observation_space", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.action_space", "modulename": "src.models.bank_env", "qualname": "BankEnv.action_space", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.episode_length", "modulename": "src.models.bank_env", "qualname": "BankEnv.episode_length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.timestep", "modulename": "src.models.bank_env", "qualname": "BankEnv.timestep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.episode_rewards", "modulename": "src.models.bank_env", "qualname": "BankEnv.episode_rewards", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.episode_nii", "modulename": "src.models.bank_env", "qualname": "BankEnv.episode_nii", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.episode_risk_penalty", "modulename": "src.models.bank_env", "qualname": "BankEnv.episode_risk_penalty", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.episode_liquidity_penalty", "modulename": "src.models.bank_env", "qualname": "BankEnv.episode_liquidity_penalty", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.total_reward", "modulename": "src.models.bank_env", "qualname": "BankEnv.total_reward", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.total_nii", "modulename": "src.models.bank_env", "qualname": "BankEnv.total_nii", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.total_risk_penalty", "modulename": "src.models.bank_env", "qualname": "BankEnv.total_risk_penalty", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.total_liquidity_penalty", "modulename": "src.models.bank_env", "qualname": "BankEnv.total_liquidity_penalty", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.state", "modulename": "src.models.bank_env", "qualname": "BankEnv.state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_env.BankEnv.step", "modulename": "src.models.bank_env", "qualname": "BankEnv.step", "kind": "function", "doc": "<p>Run one timestep of the environment's dynamics using the agent actions.</p>\n\n<p>When the end of an episode is reached (<code>terminated or truncated</code>), it is necessary to call <code>reset()</code> to\nreset this environment's state for the next episode.</p>\n\n<p><em>Changed in version 0.26:</em>\nThe Step API was changed removing <code>done</code> in favor of <code>terminated</code> and <code>truncated</code> to make it clearer\nto users when the environment had terminated or truncated which is critical for reinforcement learning\nbootstrapping algorithms.</p>\n\n<p>Args:\n    action (ActType): an action provided by the agent to update the environment state.</p>\n\n<p>Returns:\n    observation (ObsType): An element of the environment's <code>observation_space</code> as the next observation due to the agent actions.\n        An example is a numpy array containing the positions and velocities of the pole in CartPole.\n    reward (SupportsFloat): The reward as a result of taking the action.\n    terminated (bool): Whether the agent reaches the terminal state (as defined under the MDP of the task)\n        which can be positive or negative. An example is reaching the goal state or moving into the lava from\n        the Sutton and Barton, Gridworld. If true, the user needs to call <code>reset()</code>.\n    truncated (bool): Whether the truncation condition outside the scope of the MDP is satisfied.\n        Typically, this is a timelimit, but could also be used to indicate an agent physically going out of bounds.\n        Can be used to end the episode prematurely before a terminal state is reached.\n        If true, the user needs to call <code>reset()</code>.\n    info (dict): Contains auxiliary diagnostic information (helpful for debugging, learning, and logging).\n        This might, for instance, contain: metrics that describe the agent's performance state, variables that are\n        hidden from observations, or individual reward terms that are combined to produce the total reward.\n        In OpenAI Gym <v26, it contains \"TimeLimit.truncated\" to distinguish truncation and termination,\n        however this is deprecated in favour of returning terminated and truncated variables.\n    done (bool): (Deprecated) A boolean value for if the episode has ended, in which case further <code>step()</code> calls will\n        return undefined results. This was removed in OpenAI Gym v26 in favor of terminated and truncated attributes.\n        A done signal may be emitted for different reasons: Maybe the task underlying the environment was solved successfully,\n        a certain timelimit was exceeded, or the physics simulation has entered an invalid state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">action_space</span><span class=\"o\">.</span><span class=\"n\">ActionSpace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.render", "modulename": "src.models.bank_env", "qualname": "BankEnv.render", "kind": "function", "doc": "<p>Render the current state of the bank model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.get_current_frame", "modulename": "src.models.bank_env", "qualname": "BankEnv.get_current_frame", "kind": "function", "doc": "<p>Get the current frame to create a video of the bank model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.list_model", "modulename": "src.models.bank_env", "qualname": "BankEnv.list_model", "kind": "function", "doc": "<p>List the current situation of the bank model at each time step</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.plot", "modulename": "src.models.bank_env", "qualname": "BankEnv.plot", "kind": "function", "doc": "<p>Plot the current situation of the bank model\nThis includes projected cashflows, mortgages, funding,\ninterest rates and zero rates</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.plot_rewards", "modulename": "src.models.bank_env", "qualname": "BankEnv.plot_rewards", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.get_state", "modulename": "src.models.bank_env", "qualname": "BankEnv.get_state", "kind": "function", "doc": "<p>the obervable state of the bank at each time step</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.reset", "modulename": "src.models.bank_env", "qualname": "BankEnv.reset", "kind": "function", "doc": "<p>Resets the environment to an initial internal state, returning an initial observation and info.</p>\n\n<p>This method generates a new starting state often with some randomness to ensure that the agent explores the\nstate space and learns a generalised policy about the environment. This randomness can be controlled\nwith the <code>seed</code> parameter otherwise if the environment already has a random number generator and\n<code>reset()</code> is called with <code>seed=None</code>, the RNG is not reset.</p>\n\n<p>Therefore, <code>reset()</code> should (in the typical use case) be called with a seed right after initialization and then never again.</p>\n\n<p>For Custom environments, the first line of <code>reset()</code> should be <code>super().reset(seed=seed)</code> which implements\nthe seeding correctly.</p>\n\n<p><em>Changed in version v0.25:</em>\nThe <code>return_info</code> parameter was removed and now info is expected to be returned.</p>\n\n<p>Args:\n    seed (optional int): The seed that is used to initialize the environment's PRNG (<code>np_random</code>).\n        If the environment does not already have a PRNG and <code>seed=None</code> (the default option) is passed,\n        a seed will be chosen from some source of entropy (e.g. timestamp or /dev/urandom).\n        However, if the environment already has a PRNG and <code>seed=None</code> is passed, the PRNG will <em>not</em> be reset.\n        If you pass an integer, the PRNG will be reset even if it already exists.\n        Usually, you want to pass an integer <em>right after the environment has been initialized and then never again</em>.\n        Please refer to the minimal example above to see this paradigm in action.\n    options (optional dict): Additional information to specify how the environment is reset (optional,\n        depending on the specific environment)</p>\n\n<p>Returns:\n    observation (ObsType): Observation of the initial state. This will be an element of <code>observation_space</code>\n        (typically a numpy array) and is analogous to the observation returned by <code>step()</code>.\n    info (dictionary):  This dictionary contains auxiliary information complementing <code>observation</code>. It should be analogous to\n        the <code>info</code> returned by <code>step()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.reset_episode_statistics", "modulename": "src.models.bank_env", "qualname": "BankEnv.reset_episode_statistics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_env.BankEnv.close", "modulename": "src.models.bank_env", "qualname": "BankEnv.close", "kind": "function", "doc": "<p>After the user has finished using the environment, close contains the code necessary to \"clean up\" the environment.</p>\n\n<p>This is critical for closing rendering windows, database or HTTP connections.\nCalling <code>close</code> on an already closed environment has no effect and won't raise an error.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model", "modulename": "src.models.bank_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.ROOT_DIR", "modulename": "src.models.bank_model", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm&#x27;)"}, {"fullname": "src.models.bank_model.RANGE_TENOR", "modulename": "src.models.bank_model", "qualname": "RANGE_TENOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "[1, 5, 10, 20]"}, {"fullname": "src.models.bank_model.FUNDING_TENORS", "modulename": "src.models.bank_model", "qualname": "FUNDING_TENORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[1, 5, 10, 20]"}, {"fullname": "src.models.bank_model.RANGE_PROBABILITIES", "modulename": "src.models.bank_model", "qualname": "RANGE_PROBABILITIES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[0.08, 0.19, 0.23, 0.5]"}, {"fullname": "src.models.bank_model.MORTGAGE_AMOUNT", "modulename": "src.models.bank_model", "qualname": "MORTGAGE_AMOUNT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "src.models.bank_model.BOND_AMOUNT", "modulename": "src.models.bank_model", "qualname": "BOND_AMOUNT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "src.models.bank_model.MORTGAGE_SIZE", "modulename": "src.models.bank_model", "qualname": "MORTGAGE_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "12"}, {"fullname": "src.models.bank_model.COLUMN_DATA", "modulename": "src.models.bank_model", "qualname": "COLUMN_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "[(&#x27;tenor&#x27;, &lt;class &#x27;int&#x27;&gt;), (&#x27;start_date&#x27;, &#x27;datetime64[D]&#x27;), (&#x27;maturity_date&#x27;, &#x27;datetime64[D]&#x27;), (&#x27;principal&#x27;, &lt;class &#x27;int&#x27;&gt;), (&#x27;interest&#x27;, &lt;class &#x27;float&#x27;&gt;), (&#x27;period&#x27;, &#x27;datetime64[Y]&#x27;)]"}, {"fullname": "src.models.bank_model.Bankmodel", "modulename": "src.models.bank_model", "qualname": "Bankmodel", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.interest", "modulename": "src.models.bank_model", "qualname": "Bankmodel.interest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.zerocurve", "modulename": "src.models.bank_model", "qualname": "Bankmodel.zerocurve", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.hullwhite", "modulename": "src.models.bank_model", "qualname": "Bankmodel.hullwhite", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.pos_date", "modulename": "src.models.bank_model", "qualname": "Bankmodel.pos_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.timestep", "modulename": "src.models.bank_model", "qualname": "Bankmodel.timestep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.liquidity", "modulename": "src.models.bank_model", "qualname": "Bankmodel.liquidity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.risk_limit", "modulename": "src.models.bank_model", "qualname": "Bankmodel.risk_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.sa_mortgages", "modulename": "src.models.bank_model", "qualname": "Bankmodel.sa_mortgages", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.sa_funding", "modulename": "src.models.bank_model", "qualname": "Bankmodel.sa_funding", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.funding_tenors", "modulename": "src.models.bank_model", "qualname": "Bankmodel.funding_tenors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.num_actions", "modulename": "src.models.bank_model", "qualname": "Bankmodel.num_actions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.bank_model.Bankmodel.generate_mortgage_contracts", "modulename": "src.models.bank_model", "qualname": "Bankmodel.generate_mortgage_contracts", "kind": "function", "doc": "<p>Generate mortgage contracts for a specific period</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">probabilities</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.08</span><span class=\"p\">,</span> <span class=\"mf\">0.19</span><span class=\"p\">,</span> <span class=\"mf\">0.23</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.get_sim_interest_rate", "modulename": "src.models.bank_model", "qualname": "Bankmodel.get_sim_interest_rate", "kind": "function", "doc": "<p>Get interest rate for a specific start date and tenor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timestep</span>, </span><span class=\"param\"><span class=\"n\">tenor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.get_sim_zero_rate", "modulename": "src.models.bank_model", "qualname": "Bankmodel.get_sim_zero_rate", "kind": "function", "doc": "<p>Get zero rate for a specific start date and tenor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timestep</span>, </span><span class=\"param\"><span class=\"n\">tenor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.buy_sell_bond", "modulename": "src.models.bank_model", "qualname": "Bankmodel.buy_sell_bond", "kind": "function", "doc": "<p>Add Capital Markets Funding</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">buy_sell</span>, </span><span class=\"param\"><span class=\"n\">tenor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.step", "modulename": "src.models.bank_model", "qualname": "Bankmodel.step", "kind": "function", "doc": "<p>Each step we fund a time bucket or not.\nWe asume we can not repay the funding before maturity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">timestep</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.calculate_nii", "modulename": "src.models.bank_model", "qualname": "Bankmodel.calculate_nii", "kind": "function", "doc": "<p>Calculate the Net Interest Income per period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.calculate_cashflows", "modulename": "src.models.bank_model", "qualname": "Bankmodel.calculate_cashflows", "kind": "function", "doc": "<p>Calculate the future principal cashflows from mortgages and funding</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;all&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.reset", "modulename": "src.models.bank_model", "qualname": "Bankmodel.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.get_risk_penalty", "modulename": "src.models.bank_model", "qualname": "Bankmodel.get_risk_penalty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.get_reward", "modulename": "src.models.bank_model", "qualname": "Bankmodel.get_reward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.Bankmodel.draw_cashflows", "modulename": "src.models.bank_model", "qualname": "Bankmodel.draw_cashflows", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.bank_model.main", "modulename": "src.models.bank_model", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.evaluate", "modulename": "src.models.evaluate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.evaluate.evaluate_returns", "modulename": "src.models.evaluate", "qualname": "evaluate_returns", "kind": "function", "doc": "<p>Calculate the mean, IQR, and CVaR of the episode rewards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">episode_rewards</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">conf_level</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.95</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.evaluate.evaluate_policy", "modulename": "src.models.evaluate", "qualname": "evaluate_policy", "kind": "function", "doc": "<p>Runs a fixed policy for <code>n_eval_episodes</code> episodes\nMeasures the variability of the policy performance across episodes.</p>\n\n<p>This will return the mean reward - to measure the performance of the policy.\nThis will return the IQR - to measure the dispersion of the policy performance across episodes.\nThis will measure and return the Expected Shortfall at the given confidence level, which is the average of the worst x% of episodes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">stable_baselines3</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type_aliases</span><span class=\"o\">.</span><span class=\"n\">PolicyPredictor</span>,</span><span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">gymnasium</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Env</span>,</span><span class=\"param\">\t<span class=\"n\">n_eval_episodes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">conf_level</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.95</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.hullwhite", "modulename": "src.models.hullwhite", "kind": "module", "doc": "<p>The Hull White model is an extension of the Vasicek model that allows the \nshort-term interest rate to be stochastic. The model is defined by the\nfollowing stochastic differential equation:</p>\n\n<p>dr(t) = [theta(t) - a * r(t)] * dt + sigma * dW(t)</p>\n\n<p>where r(t) is the short-term interest rate at time t, theta(t) is the\nmean-reversion level of the short-term interest rate at time t, a is the\nspeed of mean reversion, sigma is the volatility of the short-term interest\nrate, and W(t) is a Wiener process.</p>\n"}, {"fullname": "src.models.hullwhite.ROOT_DIR", "modulename": "src.models.hullwhite", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm&#x27;)"}, {"fullname": "src.models.hullwhite.SIM_HORIZON_IN_YEARS", "modulename": "src.models.hullwhite", "qualname": "SIM_HORIZON_IN_YEARS", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "src.models.hullwhite.SIM_NUM_PATHS", "modulename": "src.models.hullwhite", "qualname": "SIM_NUM_PATHS", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "src.models.hullwhite.HullWhiteModel", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.models.hullwhite.HullWhiteModel.T", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.T", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.hullwhite.HullWhiteModel.num_steps", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.num_steps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.hullwhite.HullWhiteModel.num_paths", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.num_paths", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.hullwhite.HullWhiteModel.num_interest_rate", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.num_interest_rate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.hullwhite.HullWhiteModel.calculate", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.calculate", "kind": "function", "doc": "<p>Simulate interest rate paths using the Hull-White model for all correlated rates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r0</span>, </span><span class=\"param\"><span class=\"n\">kappa</span>, </span><span class=\"param\"><span class=\"n\">theta</span>, </span><span class=\"param\"><span class=\"n\">sigma</span>, </span><span class=\"param\"><span class=\"n\">correlation_matrix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.hullwhite.HullWhiteModel.fit", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interest</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">interest</span><span class=\"o\">.</span><span class=\"n\">Interest</span>,</span><span class=\"param\">\t<span class=\"n\">zerocurve</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">zerocurve</span><span class=\"o\">.</span><span class=\"n\">Zerocurve</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.hullwhite.HullWhiteModel.transform", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.hullwhite.HullWhiteModel.fit_transform", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.fit_transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interest</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">interest</span><span class=\"o\">.</span><span class=\"n\">Interest</span>,</span><span class=\"param\">\t<span class=\"n\">zerocurve</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">zerocurve</span><span class=\"o\">.</span><span class=\"n\">Zerocurve</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.hullwhite.HullWhiteModel.get_simulated_interest_rates", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.get_simulated_interest_rates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.hullwhite.HullWhiteModel.get_simulated_zero_rates", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.get_simulated_zero_rates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.hullwhite.HullWhiteModel.plot", "modulename": "src.models.hullwhite", "qualname": "HullWhiteModel.plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.hullwhite.main", "modulename": "src.models.hullwhite", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.observation_space", "modulename": "src.models.observation_space", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.observation_space.MIN_CASHFLOW", "modulename": "src.models.observation_space", "qualname": "MIN_CASHFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "-1000000"}, {"fullname": "src.models.observation_space.MAX_CASHFLOW", "modulename": "src.models.observation_space", "qualname": "MAX_CASHFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000"}, {"fullname": "src.models.observation_space.MAX_LIQUIDITY", "modulename": "src.models.observation_space", "qualname": "MAX_LIQUIDITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000"}, {"fullname": "src.models.observation_space.NUMBER_OF_INDICATORS", "modulename": "src.models.observation_space", "qualname": "NUMBER_OF_INDICATORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "52"}, {"fullname": "src.models.observation_space.MAX_SWAP_RATE", "modulename": "src.models.observation_space", "qualname": "MAX_SWAP_RATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "src.models.observation_space.MAX_BANK_RATE", "modulename": "src.models.observation_space", "qualname": "MAX_BANK_RATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "src.models.observation_space.MAX_FEATURE", "modulename": "src.models.observation_space", "qualname": "MAX_FEATURE", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "src.models.observation_space.ObservationSpace", "modulename": "src.models.observation_space", "qualname": "ObservationSpace", "kind": "class", "doc": "<p>A dictionary of <code>Space</code> instances.</p>\n\n<p>Elements of this space are (ordered) dictionaries of elements from the constituent spaces.</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from gymnasium.spaces import Dict, Box, Discrete\n      observation_space = Dict({\"position\": Box(-1, 1, shape=(2,)), \"color\": Discrete(3)}, seed=42)\n      observation_space.sample()\n          OrderedDict([('color', 0), ('position', array([-0.3991573 ,  0.21649833], dtype=float32))])</p>\n\n<pre><code>With a nested dict:\n\n&gt;&gt;&gt; from gymnasium.spaces import Box, Dict, Discrete, MultiBinary, MultiDiscrete\n&gt;&gt;&gt; Dict(  # doctest: +SKIP\n...     {\n...         \"ext_controller\": MultiDiscrete([5, 2, 2]),\n...         \"inner_state\": Dict(\n...             {\n...                 \"charge\": Discrete(100),\n...                 \"system_checks\": MultiBinary(10),\n...                 \"job_status\": Dict(\n...                     {\n...                         \"task\": Discrete(5),\n...                         \"progress\": Box(low=0, high=100, shape=()),\n...                     }\n...                 ),\n...             }\n...         ),\n...     }\n... )\n</code></pre>\n      \n      <p>It can be convenient to use <code>Dict</code> spaces if you want to make complex observations or actions more human-readable.\n      Usually, it will not be possible to use elements of this space directly in learning code. However, you can easily\n      convert <code>Dict</code> observations to flat arrays by using a <code>gymnasium.wrappers.FlattenObservation</code> wrapper.\n      Similar wrappers can be implemented to deal with <code>Dict</code> actions.</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "bases": "gymnasium.spaces.space.Space[typing.Dict[str, typing.Any]], typing.Mapping[str, gymnasium.spaces.space.Space[typing.Any]]"}, {"fullname": "src.models.observation_space.ObservationSpace.__init__", "modulename": "src.models.observation_space", "qualname": "ObservationSpace.__init__", "kind": "function", "doc": "<p>Constructor of <code>Dict</code> space.</p>\n\n<p>This space can be instantiated in one of two ways: Either you pass a dictionary\nof spaces to <code>__init__()</code> via the <code>spaces</code> argument, or you pass the spaces as separate\nkeyword arguments (where you will need to avoid the keys <code>spaces</code> and <code>seed</code>)</p>\n\n<p>Args:\n    spaces: A dictionary of spaces. This specifies the structure of the <code>Dict</code> space\n    seed: Optionally, you can use this argument to seed the RNGs of the spaces that make up the <code>Dict</code> space.\n    **spaces_kwargs: If <code>spaces</code> is <code>None</code>, you need to pass the constituent spaces as keyword arguments, as described above.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.models.observation_space.ObservationSpace.liquidity_scaling_factor", "modulename": "src.models.observation_space", "qualname": "ObservationSpace.liquidity_scaling_factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.observation_space.ObservationSpace.cashflow_scaling_factor", "modulename": "src.models.observation_space", "qualname": "ObservationSpace.cashflow_scaling_factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.observation_space.ObservationSpace.swap_rates_scaling_factor", "modulename": "src.models.observation_space", "qualname": "ObservationSpace.swap_rates_scaling_factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.observation_space.ObservationSpace.bank_rates_scaling_factor", "modulename": "src.models.observation_space", "qualname": "ObservationSpace.bank_rates_scaling_factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.observation_space.ObservationSpace.features_scaling_factor", "modulename": "src.models.observation_space", "qualname": "ObservationSpace.features_scaling_factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.observation_space.ObservationSpace.normalize_observation", "modulename": "src.models.observation_space", "qualname": "ObservationSpace.normalize_observation", "kind": "function", "doc": "<p>Function to normalize observations</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.observation_space.ObservationSpace.denormalize_observation", "modulename": "src.models.observation_space", "qualname": "ObservationSpace.denormalize_observation", "kind": "function", "doc": "<p>Function to denormalize observations</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.rl", "modulename": "src.models.rl", "kind": "module", "doc": "<p>Testing the A2C Model for the Bank Environment.</p>\n"}, {"fullname": "src.models.rl.linear_schedule", "modulename": "src.models.rl", "qualname": "linear_schedule", "kind": "function", "doc": "<p>Linear learning rate schedule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">initial_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.rl.train_model", "modulename": "src.models.rl", "qualname": "train_model", "kind": "function", "doc": "<p>Train the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">60000</span>, </span><span class=\"param\"><span class=\"n\">log_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;tmp/&#39;</span>, </span><span class=\"param\"><span class=\"n\">ent_coef</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;A2C&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.simple_dm", "modulename": "src.models.simple_dm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.simple_dm.MAX_FUNDING_PER_TENOR", "modulename": "src.models.simple_dm", "qualname": "MAX_FUNDING_PER_TENOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "src.models.simple_dm.MIN_LIQ_AMOUNT", "modulename": "src.models.simple_dm", "qualname": "MIN_LIQ_AMOUNT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "src.models.simple_dm.Duration_matching", "modulename": "src.models.simple_dm", "qualname": "Duration_matching", "kind": "class", "doc": "<p>Duration Matching Model</p>\n"}, {"fullname": "src.models.simple_dm.Duration_matching.__init__", "modulename": "src.models.simple_dm", "qualname": "Duration_matching.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span>)</span>"}, {"fullname": "src.models.simple_dm.Duration_matching.env", "modulename": "src.models.simple_dm", "qualname": "Duration_matching.env", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.simple_dm.Duration_matching.name", "modulename": "src.models.simple_dm", "qualname": "Duration_matching.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.simple_dm.Duration_matching.bankmodel", "modulename": "src.models.simple_dm", "qualname": "Duration_matching.bankmodel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.simple_dm.Duration_matching.action_space", "modulename": "src.models.simple_dm", "qualname": "Duration_matching.action_space", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.simple_dm.Duration_matching.observation_space", "modulename": "src.models.simple_dm", "qualname": "Duration_matching.observation_space", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.simple_dm.Duration_matching.predict", "modulename": "src.models.simple_dm", "qualname": "Duration_matching.predict", "kind": "function", "doc": "<p>Predict the action</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obs</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">episode_start</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">deterministic</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.train", "modulename": "src.models.train", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.train.get_innermost_env", "modulename": "src.models.train", "qualname": "get_innermost_env", "kind": "function", "doc": "<p>Get innermost non-vectorized environment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.train.train", "modulename": "src.models.train", "qualname": "train", "kind": "function", "doc": "<p>Trains a model for <code>total_timesteps</code> in the environment\nMeasures the variability of the training results accross episodes</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">stable_baselines3</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type_aliases</span><span class=\"o\">.</span><span class=\"n\">PolicyPredictor</span>,</span><span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">gymnasium</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Env</span><span class=\"p\">,</span> <span class=\"n\">stable_baselines3</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">vec_env</span><span class=\"o\">.</span><span class=\"n\">base_vec_env</span><span class=\"o\">.</span><span class=\"n\">VecEnv</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">total_timesteps</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>,</span><span class=\"param\">\t<span class=\"n\">conf_level</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.95</span>,</span><span class=\"param\">\t<span class=\"n\">tb_log_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;A2C&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.tests", "modulename": "src.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.tests.test_bankmodel_a2c_train", "modulename": "src.tests.test_bankmodel_a2c_train", "kind": "module", "doc": "<p>Testing the A2C Model for the Bank Environment.</p>\n"}, {"fullname": "src.tests.test_bankmodel_a2c_train.ROOT_DIR", "modulename": "src.tests.test_bankmodel_a2c_train", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;F:/OneDrive/Documents/GitHub/rl-alm&#x27;)"}, {"fullname": "src.tests.test_bankmodel_a2c_train.get_innermost_env", "modulename": "src.tests.test_bankmodel_a2c_train", "qualname": "get_innermost_env", "kind": "function", "doc": "<p>Get innermost non-vectorized environment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_bankmodel_a2c_train.linear_schedule", "modulename": "src.tests.test_bankmodel_a2c_train", "qualname": "linear_schedule", "kind": "function", "doc": "<p>Linear learning rate schedule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">initial_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_bankmodel_a2c_train.show_model", "modulename": "src.tests.test_bankmodel_a2c_train", "qualname": "show_model", "kind": "function", "doc": "<p>Show the model in the environment</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env_id</span>,</span><span class=\"param\">\t<span class=\"n\">modelpath</span><span class=\"o\">=</span><span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;F:/OneDrive/Documents/GitHub/rl-alm/models/A2C_V_50000.zip&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_bankmodel_a2c_train.random_walk", "modulename": "src.tests.test_bankmodel_a2c_train", "qualname": "random_walk", "kind": "function", "doc": "<p>Random walk in the environment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_bankmodel_a2c_train.test_model", "modulename": "src.tests.test_bankmodel_a2c_train", "qualname": "test_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_bankmodel_a2c_train.main", "modulename": "src.tests.test_bankmodel_a2c_train", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_bankmodel_ppo_run", "modulename": "src.tests.test_bankmodel_ppo_run", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.tests.test_bankmodel_ppo_run.main", "modulename": "src.tests.test_bankmodel_ppo_run", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization", "modulename": "src.visualization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.visualization.seaborn_test", "modulename": "src.visualization.seaborn_test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.visualization.seaborn_test.main", "modulename": "src.visualization.seaborn_test", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.test", "modulename": "src.visualization.test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.visualization.test.data", "modulename": "src.visualization.test", "qualname": "data", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;tenor&#x27;: [30, 20, 30, 10, 20], &#x27;start_date&#x27;: [&#x27;2023-01-01&#x27;, &#x27;2022-02-15&#x27;, &#x27;2023-03-10&#x27;, &#x27;2022-06-20&#x27;, &#x27;2022-11-05&#x27;], &#x27;maturity&#x27;: [&#x27;2038-01-01&#x27;, &#x27;2052-02-15&#x27;, &#x27;2033-03-10&#x27;, &#x27;2042-06-20&#x27;, &#x27;2037-11-05&#x27;], &#x27;principal&#x27;: [200000, 300000, 150000, 250000, 180000], &#x27;interest&#x27;: [0.04, 0.035, 0.03, 0.045, 0.038]}"}, {"fullname": "src.visualization.test.mortgage_data", "modulename": "src.visualization.test", "qualname": "mortgage_data", "kind": "variable", "doc": "<p></p>\n", "default_value": "   tenor start_date   maturity  principal  interest\n0     30 2023-01-01 2038-01-01     200000     0.040\n1     20 2022-02-15 2052-02-15     300000     0.035\n2     30 2023-03-10 2033-03-10     150000     0.030\n3     10 2022-06-20 2042-06-20     250000     0.045\n4     20 2022-11-05 2037-11-05     180000     0.038"}, {"fullname": "src.visualization.test.latest_month", "modulename": "src.visualization.test", "qualname": "latest_month", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "src.visualization.test.latest_month_data", "modulename": "src.visualization.test", "qualname": "latest_month_data", "kind": "variable", "doc": "<p></p>\n", "default_value": "   tenor start_date   maturity  principal  interest\n2     30 2023-03-10 2033-03-10     150000      0.03"}, {"fullname": "src.visualization.test.unique_tenors", "modulename": "src.visualization.test", "qualname": "unique_tenors", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([30, 20, 10], dtype=int64)"}, {"fullname": "src.visualization.visualize", "modulename": "src.visualization.visualize", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.visualization.visualize.TENORS", "modulename": "src.visualization.visualize", "qualname": "TENORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Overnight&#x27;: 0, &#x27;3 Months&#x27;: 3, &#x27;6 Months&#x27;: 6, &#x27;9 Months&#x27;: 9, &#x27;1 Year&#x27;: 12, &#x27;15 Months&#x27;: 15, &#x27;18 months&#x27;: 18, &#x27;2 Years&#x27;: 24, &#x27;3 Years&#x27;: 36, &#x27;4 Years&#x27;: 48, &#x27;5 Years&#x27;: 60, &#x27;7 Years&#x27;: 84, &#x27;10 Years&#x27;: 120, &#x27;15 Years&#x27;: 180, &#x27;30 Years&#x27;: 360}"}, {"fullname": "src.visualization.visualize.YEARS", "modulename": "src.visualization.visualize", "qualname": "YEARS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[1, 5, 10, 20]"}, {"fullname": "src.visualization.visualize.FIGSIZE", "modulename": "src.visualization.visualize", "qualname": "FIGSIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "(10, 6)"}, {"fullname": "src.visualization.visualize.situational_plot", "modulename": "src.visualization.visualize", "qualname": "situational_plot", "kind": "function", "doc": "<p>Plot the current state of the Bank Model</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pos_date</span>,</span><span class=\"param\">\t<span class=\"n\">timestep</span>,</span><span class=\"param\">\t<span class=\"n\">liquidity</span>,</span><span class=\"param\">\t<span class=\"n\">reward</span>,</span><span class=\"param\">\t<span class=\"n\">risk_penalty</span>,</span><span class=\"param\">\t<span class=\"n\">cf_proj_cashflows</span>,</span><span class=\"param\">\t<span class=\"n\">cf_funding</span>,</span><span class=\"param\">\t<span class=\"n\">cf_mortgages</span>,</span><span class=\"param\">\t<span class=\"n\">interest_rates</span>,</span><span class=\"param\">\t<span class=\"n\">zero_rates</span>,</span><span class=\"param\">\t<span class=\"n\">mortgages</span>,</span><span class=\"param\">\t<span class=\"n\">funding</span>,</span><span class=\"param\">\t<span class=\"n\">num_cols</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">num_rows</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">figurepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;F:/OneDrive/Documents/GitHub/rl-alm/reports/figures&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.visualize.plot_rewards", "modulename": "src.visualization.visualize", "qualname": "plot_rewards", "kind": "function", "doc": "<p>plot episode rewards</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">episode_rewards</span>,</span><span class=\"param\">\t<span class=\"n\">interpolate_line</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">interpolate_points</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">rolling_line</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Rewards&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Rewards per episode&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rewards&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figurepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;F:/OneDrive/Documents/GitHub/rl-alm/reports/figures&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.visualize.lineplot", "modulename": "src.visualization.visualize", "qualname": "lineplot", "kind": "function", "doc": "<p>simple line plot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hue</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;lineplot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figurepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;F:/OneDrive/Documents/GitHub/rl-alm/reports/figures&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.visualize.barplot", "modulename": "src.visualization.visualize", "qualname": "barplot", "kind": "function", "doc": "<p>simple line plot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hue</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;lineplot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figurepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;F:/OneDrive/Documents/GitHub/rl-alm/reports/figures&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.visualize.bpvplot", "modulename": "src.visualization.visualize", "qualname": "bpvplot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bpv</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">limits</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bpv_profile&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figurepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;F:/OneDrive/Documents/GitHub/rl-alm/reports/figures&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.visualize.curveplot", "modulename": "src.visualization.visualize", "qualname": "curveplot", "kind": "function", "doc": "<p>Plot the simulated and original interest rate curves</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">curve_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sim_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">datetime64</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;curveplot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figurepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;F:/OneDrive/Documents/GitHub/rl-alm/reports/figures&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Simulated Interest Rate Curves with Correlation&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.visualize.plot_frame", "modulename": "src.visualization.visualize", "qualname": "plot_frame", "kind": "function", "doc": "<p>Plot a Frame of the video of the bank model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">ax</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();